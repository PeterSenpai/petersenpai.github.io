{"componentChunkName":"component---src-gatsby-theme-portfolio-minimal-templates-article-index-tsx","path":"/leetcode/LinkedList/linked-list-basic/","result":{"pageContext":{"article":{"banner":{"alt":"First Markdown Post","caption":"Linked List <u><a href=\"https://leetcode.com/tag/linked-list/\"> LeetCode</a></u>","src":null},"body":"<h1>Linked List Basics</h1>\n<p>Linked List Basic tricks we should be able to recite flawlessly.</p>\n<p>Define some util class/functions, these are just utility functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\na <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\ne <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\nf <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\ng <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\nhead <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">initList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n    e <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n    g <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n    head <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> head\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Simply traverse the list\n    >>> printList(head)\n    '1, 2, 3, 4, 5, 6, 7, 8'\n    \"\"\"</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> result\n    curr <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n        curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Find Node by index, pretty much the same as traverse with different terminating conditions for the while loop</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">findByIndex</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Find value by index\n    >>> findByIndex(head, 0)\n    1\n    >>> findByIndex(head, 7)\n    8\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n    pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    curr <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">while</span> pos <span class=\"token operator\">!=</span> index<span class=\"token punctuation\">:</span>\n        curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">.</span>val</code></pre></div>\n<p>Delete all nodes that have the given value, another variation of traversal.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">deleteAllValue</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Delete all the nodes whose value eq val\n    >>> printList(deleteAllValue(initList(), 1))\n    '2, 3, 4, 5, 6, 7, 8'\n    >>> printList(deleteAllValue(initList(), 8))\n    '1, 2, 3, 4, 5, 6, 7'\n    >>> printList(deleteAllValue(initList(), 3))\n    '1, 2, 4, 5, 6, 7, 8'\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    dummy <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span>\n    prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">,</span> head\n\n    <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n            prev<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            prev <span class=\"token operator\">=</span> curr\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>Dual pointers - fast and slow pointers + traversal</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">findMid</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Find the middle of a LinkedList\n    >>> half = findMid(head)\n    >>> printList(half)\n    '5, 6, 7, 8'\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n    fast <span class=\"token operator\">=</span> slow <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">while</span> fast <span class=\"token keyword\">and</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">return</span> slow</code></pre></div>\n<p>Reverse a linked list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Reverse the linkedlist using 2/3 pointers\n    >>> new_list = reverse(head)\n    >>> printList(new_list)\n    '8, 7, 6, 5, 4, 3, 2, 1'\n    >>> head = reverse(new_list)\n    >>> printList(head)\n    '1, 2, 3, 4, 5, 6, 7, 8'\n    \"\"\"</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> head\n\n    <span class=\"token keyword\">while</span> curr<span class=\"token punctuation\">:</span>\n        temp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> prev\n        prev <span class=\"token operator\">=</span> curr\n        curr <span class=\"token operator\">=</span> temp\n\n    <span class=\"token keyword\">return</span> prev</code></pre></div>\n<p>Reverse till k position</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverse_till_k</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    k is not index but postion, i.e. 1 &lt;= k &lt;= len(list)\n\n    >>> printList(reverse_till_k(head, 1))\n    '1, 2, 3, 4, 5, 6, 7, 8'\n    >>> printList(reverse_till_k(head, 8))\n    '8, 7, 6, 5, 4, 3, 2, 1'\n    >>> new = initList()\n    >>> printList(reverse_till_k(new, 2))\n    '2, 1, 3, 4, 5, 6, 7, 8'\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    prev<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> head\n\n    pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> pos <span class=\"token operator\">!=</span> k<span class=\"token punctuation\">:</span>\n        temp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> prev\n        prev <span class=\"token operator\">=</span> curr\n        curr <span class=\"token operator\">=</span> temp\n        pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> curr\n    <span class=\"token keyword\">return</span> prev</code></pre></div>\n<p>Given a head and last node, reverse everything [head, last) and return a new head and a new tail. This function stand-alone does not do anything but it's useful for group or partial reverse</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverse_except_last</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    return new head(node before last) and new tail(the current head)\n    >>> a = ListNode(8, None)\n    >>> b = ListNode(7, a)\n    >>> c = ListNode(6, b)\n    >>> new_head, new_tail = reverse_except_last(c, a)\n    >>> printList(new_head)\n    '7, 6'\n    >>> printList(new_tail)\n    '6'\n    \"\"\"</span>\n    new_tail <span class=\"token operator\">=</span> head\n    curr <span class=\"token operator\">=</span> head\n    prev<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">while</span> curr <span class=\"token operator\">!=</span> last<span class=\"token punctuation\">:</span>\n        tmp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        curr<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> prev\n        prev <span class=\"token operator\">=</span> curr\n        curr <span class=\"token operator\">=</span> tmp\n\n    new_head <span class=\"token operator\">=</span> prev\n    <span class=\"token keyword\">return</span> new_head<span class=\"token punctuation\">,</span> new_tail\n</code></pre></div>\n<p>This needs an update.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverseKGroup</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    m, n are position not index, i.e. 1 &lt;= m,n &lt;= len(head)\n    >>> printList(reverseKGroup(initList(), 2))\n    '2, 1, 4, 3, 6, 5, 8, 7'\n    >>> printList(reverseKGroup(initList(), 4))\n    '4, 3, 2, 1, 8, 7, 6, 5'\n    \"\"\"</span>\n\n    dummy <span class=\"token operator\">=</span> jump <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> l <span class=\"token operator\">=</span> r <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> r <span class=\"token keyword\">and</span> count <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">:</span>   <span class=\"token comment\"># use r to locate the range</span>\n            r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> k<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if size k satisfied, reverse the inner linked list</span>\n            pre<span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> r<span class=\"token punctuation\">,</span> l\n            <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># standard reversing with pre being the beginning of next group.</span>\n                cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> pre\n                cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                pre <span class=\"token operator\">=</span> cur\n            jump<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> jump<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r  <span class=\"token comment\"># connect two k-groups</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> doctest\n    doctest<span class=\"token punctuation\">.</span>testmod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","categories":["LinkedList","General Tricks"],"date":"May 04, 2023","description":"Linked List Leetcode","id":"b8bbba2b-bff8-5de6-909f-117cb4a25ae6","keywords":["LinkedList","Leetcode"],"slug":"/leetcode/LinkedList/linked-list-basic/","title":"Linked List Basic","readingTime":{"text":"4 min read"}},"listingPagePath":"/blog"}},"staticQueryHashes":["172304273","948380417"],"slicesMap":{}}