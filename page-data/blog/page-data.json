{"componentChunkName":"component---src-gatsby-theme-portfolio-minimal-templates-article-listing-index-tsx","path":"/blog/","result":{"pageContext":{"articles":[{"banner":{"alt":"First Markdown Post","caption":"Rust Crab <u><a href=\"https://opensource.com/article/20/12/learn-rust\">in the sea.</a></u>","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#084888","images":{"fallback":{"src":"/static/1df8e0b119ced6fdc4a3fbfd9d560cbb/2b2b5/rust_programming_crab_sea.webp","srcSet":"/static/1df8e0b119ced6fdc4a3fbfd9d560cbb/322ad/rust_programming_crab_sea.webp 165w,\n/static/1df8e0b119ced6fdc4a3fbfd9d560cbb/de3b3/rust_programming_crab_sea.webp 330w,\n/static/1df8e0b119ced6fdc4a3fbfd9d560cbb/2b2b5/rust_programming_crab_sea.webp 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[]},"width":660,"height":400}}}},"body":"<h2>Learn some rust</h2>\n<p>To install visit <a href=\"https://www.rust-lang.org/learn/get-started\">here</a>.</p>\n<p>Create a rust project by running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> cargo new learn_rust</code></pre></div>\n<p>The project structure</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hello-rust\n|- Cargo.toml\n|- src\n  |- main.rs</code></pre></div>\n<p><code class=\"language-text\">Cargo.toml</code> == <code class=\"language-text\">package.json</code></p>\n<p><code class=\"language-text\">cargo add ferris-says@0.2</code> == <code class=\"language-text\">npm install ferris-says@0.2</code></p>\n<p><code class=\"language-text\">cargo build</code> == <code class=\"language-text\">npm i</code></p>\n<p><code class=\"language-text\">cargo run</code> == <code class=\"language-text\">npm run start</code></p>\n<p>Let's skip the hello world since no one cares.</p>\n<p>Following the rust <a href=\"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html\">lang book</a>, we can build a guessing game.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">use colored::*;\nuse rand::Rng;\nuse std::{cmp::Ordering, io};\n\nfn main() {\n    let mut s = String::new();\n    let secret = rand::thread_rng().gen_range(1..100);\n\n    loop {\n        println!(\"Type your input\");\n        io::stdin().read_line(&amp;mut s).expect(\"something's wrong\");\n\n        let guess: u32 = match s.trim().parse() {\n            Ok(num) => num,\n            Err(e) => {\n                println!(\"{}\", e);\n                println!(\"Please type a number\");\n                continue;\n            }\n        };\n\n        println!(\"your input is: {}\", s);\n        match guess.cmp(&amp;secret) {\n            Ordering::Less => println!(\"{}\", \"Too small, try something bigger.\".red()),\n            Ordering::Greater => println!(\"{}\", \"Too big, try something smaller.\".red()),\n            Ordering::Equal => {\n                println!(\"{}\", \"You win!\".green());\n                break;\n            }\n        }\n    }\n}\n</code></pre></div>\n<p>There's something interesting here, <code class=\"language-text\">io::stdin().read_line(&amp;mut s)</code> returns a type called <code class=\"language-text\">Result&lt;..></code>. I understand this as a sync version of\npromise in JS. We can either just return the result (in this case the user input) with <code class=\"language-text\">expect</code> that acts like a <code class=\"language-text\">catch</code> or we can use <code class=\"language-text\">match</code> to\ncreate \"call back\"s for <code class=\"language-text\">Ok</code> - a successful case and <code class=\"language-text\">Err</code> - a panic case.</p>\n<p>One other thing is my code doesn't work well after the first input - whatever input comes after the first one will become invalid.</p>\n<p>By taking a closer look, mine seems to put the buffer string outside of the loop and all the input will be appended to the string with a new line character.\nSo adding <code class=\"language-text\">s.clear()</code> in the first line of the loop fixed my code.</p>","categories":["Rust","Learning"],"date":"March 28, 2023","description":"Slowly learning some rust","id":"e56ac452-6b3b-5e3e-bd26-ce16ed9d208f","keywords":["Rust","Note"],"slug":"/learn-some-rust/","title":"Learn some Rust","readingTime":{"text":"2 min read"}}]}},"staticQueryHashes":["172304273","948380417"],"slicesMap":{}}